let johnn: "대머리";

let kimm: "솔로";

// 변수 선언아니야? - 타입으로 쓰일 수 있다.
// 마음대로 변수나 함수에 할당 가능.

//특정 글자나 숫자만 가질 수 있게 제한을 두는 타입을 literal type 이라고 부릅니다.

//더욱 엄격한 실드라고 보면 되겠군요.

let 방향: "left" | "right";
방향 = "left";

function 함수(a: "hello"): 1 | 0 | -1 {
  return 1;
}

//함수도 똑같습니다.

// 파라미터 타입선언할 때 글자나 숫자를 집어넣으시면 그 만 파라미터로 넣을 수 있고

// return 타입선언할 때도 글자나 숫자를 집어넣으시면 그 값만 return할 수 있습니다.

// Q. 이런 함수는 어떻게 만들까요?

// - '가위', '바위', '보' 문자들만 파라미터로 입력할 수 있고

// - '가위', '바위', '보' 라는 문자들만 담을 수 있는 array 자료만 return 할 수 있습니다.

// - 예를 들면 ['가위', '보', '가위'] 이런거 return 가능

// - ['가위', '바보'] 이런거 return하면 에러나야함

function rsp(a: "가위" | "바위" | "보"): ("가위" | "바위" | "보")[] {
  return ["가위", "보"];
}

const 변하면안되는변수 = 123;
// 중요한, 변하지않는 정보를 저장하고 싶을 때 const를 자주 쓰는데

// 가끔은 변하는 중요한 정보를 저장하고 싶을 땐 const가 무쓸모입니다.

// 예를 들어 변수가 'kim' 또는 'park' 만 가질 수 있는 이런 식의 엄격한 변수는 못만듭니다.

`const 이름 = 'kim' | 'park'`; //(이런 식의 문법은 자바스크립트에 없음)

// 그럴 때 타입스크립트 설치하고 literal type 쓰면 되는 것입니다.

//as const 문법

// 'kim' 이라는 타입만 들어올 수 있는 함수를 만들었습니다.

// 근데 자료.name을 입력하고 싶은겁니다.

var 자료 = {
  name: "kim",
};

function 내함수(a: "kim") {}
내함수(자료.name);

//   위 코드는 에러가 납니다.

// 왜 에러가 나겠습니까.

// 함수는 'kim' 타입만 입력할 수 있다고 해놨고

// 자료.name 이라는건 string 타입이지 'kim' 타입이 아니기 때문입니다.

// 이런걸 해결하고 싶으면

// 1. object 만들 때 타입을 잘 미리 정하든가

// 2. 예전에 배웠던 assertion을 쓰시든가 (as 'kim' 이런걸 붙이는 겁니다)

// 3. 아니면 as const 라는걸 애초에 object 자료에 붙일 수 있습니다.

var 자료2 = {
  name: "kim",
} as const;

function 내함수2(a: "kim") {}
내함수(자료2.name);

//   as const는 효과가 2개인데

// 1. 타입을 object의 value로 바꿔줍니다. (타입을 'kim'으로 바꿔줍니다)

// 2. object안에 있는 모든 속성을 readonly로 바꿔줍니다 (변경하면 에러나게)

// object를 잠그고 싶으면 as const를 활용해보도록 합시다.

// 'kim'을 value로 볼 것이냐 type으로 볼 것이냐 .
